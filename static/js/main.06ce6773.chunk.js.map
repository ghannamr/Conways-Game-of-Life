{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","setWorld","width","window","innerWidth","height","innerHeight","worldWidth","Math","floor","worldHeight","setState","board","Array","fill","running","setup","i","j","state","map","row","y","_","x","evaluateCell","neighboringCount","forEach","direction","neighborX","neighborY","run","gameTimer","setTimeout","tickRate","stop","clearTimeout","refresh","randomize","random","this","addEventListener","className","key","box","style","background","onClick","e","preventDefault","disabled","id","type","min","max","value","onChange","target","step","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06ce6773.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst HEIGHT = 40, WIDTH = 60;\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            board: new Array(HEIGHT).fill(new Array(WIDTH).fill(false)),\n            running: false,\n            tickRate: 1000,\n            worldWidth: 0,\n            worldHeight: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.setWorld();\n        window.addEventListener(\"resize\", () => {\n            this.setWorld();\n        });\n    }\n\n    setWorld = () => {\n        let width = window.innerWidth, height = window.innerHeight;\n        let worldWidth = Math.floor(width * 0.8 / 10);\n        let worldHeight = Math.floor(height * 0.6 / 10);\n        this.setState({\n            board: new Array(worldHeight).fill(new Array(worldWidth).fill(false)),\n            worldWidth: worldWidth,\n            worldHeight: worldHeight,\n            running: false,\n        });\n    }\n\n    setup = (i, j) => {\n        if (!this.state.running) {\n            this.setState({board: this.state.board.map((row, y) => (\n                row.map((_, x) => {\n                    return j === y && i === x ? !this.state.board[y][x] : this.state.board[y][x]\n                })\n            ))});\n        }\n    }\n\n    evaluateCell = (x, y) => {\n        const directions = [[-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]];\n        let neighboringCount = 0;\n        directions.forEach((direction) => {\n            let neighborX = (x + direction[0]), neighborY = (y + direction[1]);\n            neighborX = ((neighborX % this.state.worldWidth) + this.state.worldWidth) % this.state.worldWidth;\n            neighborY = ((neighborY % this.state.worldHeight) + this.state.worldHeight) % this.state.worldHeight;\n            if (this.state.board[neighborY][neighborX]) {\n                neighboringCount = neighboringCount + 1;\n            }\n        });\n        return neighboringCount === 3 || (neighboringCount === 2 && this.state.board[y][x]);\n    }\n\n    run = () => {\n        this.setState({running: true});\n        this.gameTimer = setTimeout(() => {\n            this.setState({board: this.state.board.map((row, y) => (\n                    row.map((_, x) => {\n                        return this.evaluateCell(x, y);\n                    })\n                ))});\n            this.run();\n        }, this.state.tickRate);\n    }\n\n    stop = () => {\n        this.setState({running: false});\n        clearTimeout(this.gameTimer);\n    }\n\n    refresh = () => {\n        this.setState({board: new Array(this.state.worldHeight).fill(new Array(this.state.worldWidth).fill(false))});\n    }\n\n    randomize = () => {\n        this.setState({board: this.state.board.map((row, y) => (\n                row.map((_, x) => {\n                    return Math.random() >= 0.5;\n                })\n            ))})\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"board-container\">\n                    <div className=\"board\">\n                        {this.state.board.map((row, y) => (\n                            <div className=\"row\" key={y}>\n                                {row.map((box, x) => (\n                                    <div\n                                        className=\"box\" style={{background: box ? \"#f8f8f2\" : \"#282a36\"}}\n                                        onClick={() => this.setup(x, y)}\n                                        key={x}\n                                    >\n\n                                    </div>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"start-stop\">\n                    <button\n                        onClick={(e) => {\n                            e.preventDefault();\n                            if (this.state.running) {\n                                this.stop();\n                            } else {\n                                this.run();\n                            }\n                        }}\n                        style={{background: this.state.running ? \"#ff5555\" : \"#50fa7b\"}}\n                        className=\"main\"\n                    >\n                        {this.state.running ? \"Stop\" : \"Start\"}\n                    </button>\n                    <button\n                        disabled={this.state.running}\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.refresh();\n                        }}\n                    >\n                        Refresh\n                    </button>\n                    <button\n                        disabled={this.state.running}\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.randomize();\n                        }}\n                    >\n                        Randomize\n                    </button>\n                    <div className=\"tick-rate\">\n                        <p>Tick Rate {this.state.tickRate} ms</p>\n                        <input\n                            id=\"tick-rate\"\n                            type=\"range\"\n                            min=\"10\" max=\"3000\"\n                            value={this.state.tickRate}\n                            onChange={(e) => {this.setState({tickRate: e.target.value})}}\n                            step=\"10\"\n                        />\n                    </div>\n                </div>\n                <div className=\"templates\">\n                    <div className=\"about\">\n                        <h1>What is Conway's Game of Life</h1>\n                        <p>\n                            Simply put, it's a game that shows that complex patterns can emerge when an defined initial\n                            state is constrained by a simple set of rules. For a real explanation, visit the\n                            game's <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Wikipedia page</a>.\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}